/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import org.stategen.framework.ibatis.util.PageQueryUtils;
import org.stategen.framework.lite.PageList;

import com.mycompany.biz.dao.UserRoleDao;
import com.mycompany.biz.domain.UserRole;

/**
 * UserRoleDao
 * <pre>
 * database table: user_role
 * database table comments: UserRole
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 该类仅可以修改引用
 * </pre>
 */
public class UserRoleDaoImpl extends SqlMapClientDaoSupport implements UserRoleDao {

    /**
	 * 
	 * sql:insert into user_role ( create_time , update_time , delete_flag , id , user_id , role_id , role_type ) VALUES (CURRENT_TIMESTAMP(6),CURRENT_TIMESTAMP(6),0,?,?,?,?)
	 */
    public UserRole insert(UserRole userRole) throws DataAccessException {
        if (userRole == null) {
            throw new IllegalArgumentException("Can't insert a null data object into db.");
        }
        getSqlMapClientTemplate().insert("insert.UserRole.trade", userRole);
        return userRole;
    }

    /**
	 * 
	 * sql:UPDATE user_role SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and id = ?
	 */
    public Long deleteById(Long id) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("id", id);
        return (long) getSqlMapClientTemplate().update("deleteById.UserRole.trade", params);
    }

    /**
	 * 
	 * sql:UPDATE user_role SET update_time= CURRENT_TIMESTAMP(6) , user_id = ? , role_id = ? , role_type = ? where delete_flag = 0 and id = ?
	 */
    public UserRole update(UserRole userRole) throws DataAccessException {
        if (userRole == null) {
            throw new IllegalArgumentException("Can't update by a null data object.");
        }
        getSqlMapClientTemplate().update("update.UserRole.trade", userRole);
        return userRole;
    }

    /**
	 * 
	 * sql:select a.id, a.user_id, a.role_id, a.role_type, a.create_time, a.update_time, a.delete_flag from user_role a where a.delete_flag = 0 and a.id = ?
	 */
    public UserRole getUserRoleById(Long id) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("id", id);
        return (UserRole) getSqlMapClientTemplate().queryForObject("getUserRoleById.UserRole.trade", params);
    }

    /**
	 * 
	 * sql:select a.id, a.user_id, a.role_id, a.role_type, a.create_time, a.update_time, a.delete_flag from user_role a where a.delete_flag = 0 and a.id in ( ? ) and a.user_id in ( ? ) and a.role_id in ( ? ) and a.role_type in ( ? ) and a.create_time >=? and a.create_time <? and a.update_time >=? and a.update_time <? and 0 = 1
	 */
    @SuppressWarnings("unchecked")
    public PageList<UserRole> getUserRolePageListByDefaultQuery(UserRole userRole, int pageSize, int pageNum) throws DataAccessException {
        return (PageList<UserRole>) PageQueryUtils.pageQuery(getSqlMapClientTemplate(), "getUserRolePageListByDefaultQuery.UserRole.trade", userRole, pageNum, pageSize);
    }

    /**
	 * 
	 * sql:select a.id, a.user_id, a.role_id, a.role_type, a.create_time, a.update_time, a.delete_flag from user_role a where a.delete_flag = 0 and a.id in ( ? )
	 */
    @SuppressWarnings("unchecked")
    public List<UserRole> getUserRolesByIds(java.util.List<Long> ids) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("ids", ids);
        return (List<UserRole>) getSqlMapClientTemplate().queryForList("getUserRolesByIds.UserRole.trade", params);
    }

    /**
	 * 
	 * sql:UPDATE user_role SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and id in ( ? )
	 */
    public Long deleteByIds(java.util.List<Long> ids) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("ids", ids);
        return (long) getSqlMapClientTemplate().update("deleteByIds.UserRole.trade", params);
    }
}
