/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.dao;

import java.util.List;

import com.mycompany.biz.domain.TopicReply;
import org.springframework.dao.DataAccessException;
import org.stategen.framework.lite.PageList;

/**
 * TopicReplyDao
 * <pre>
 * database table: topic_reply
 * database table comments: TopicReply
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 该类仅可以修改引用
 * </pre>
 */
public interface TopicReplyDao {

	/**
    <pre>
    &#64;ApiParam() String topicReplyId,
    &#64;ApiParam() String topicId,
    &#64;ApiParam() String authorId,
    &#64;ApiParam() String content,
    &#64;ApiParam() String createAt,
    &#64;ApiParam() String replyId,
    &#64;ApiParam(hidden = true) TopicReply topicReply,
    
    </pre>
	 * 
	 * sql:insert into topic_reply ( create_time , update_time , delete_flag , topic_reply_id , topic_id , author_id , content , create_at , reply_id ) VALUES (CURRENT_TIMESTAMP(6),CURRENT_TIMESTAMP(6),0,?,?,?,?,?,?)
	 */
	public TopicReply insert(TopicReply topicReply) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("topicReplyId") String topicReplyId,
    
    </pre>
	 * 
	 * sql:UPDATE topic_reply SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and topic_reply_id = ?
	 */
	public String delete(String topicReplyId) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam() String topicId,
    &#64;ApiParam() String authorId,
    &#64;ApiParam() String content,
    &#64;ApiParam() String createAt,
    &#64;ApiParam() String replyId,
    &#64;ApiParam() String topicReplyId,
    &#64;ApiParam(hidden = true) TopicReply topicReply,
    
    </pre>
	 * 
	 * sql:UPDATE topic_reply SET update_time= CURRENT_TIMESTAMP(6) , topic_id = ? , author_id = ? , content = ? , create_at = ? , reply_id = ? where delete_flag = 0 and topic_reply_id = ?
	 */
	public TopicReply update(TopicReply topicReply) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("topicReplyId") String topicReplyId,
    
    </pre>
	 * 
	 * sql:select a.topic_reply_id, a.topic_id, a.author_id, a.content, a.create_at, a.reply_id, a.create_time, a.update_time, a.delete_flag from topic_reply a where a.delete_flag = 0 and a.topic_reply_id = ?
	 */
	public TopicReply getTopicReplyByTopicReplyId(String topicReplyId) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam()&#64;RequestParam(required =false,name="topicReplyIds") ArrayList&lt;String&gt; topicReplyIds,
    &#64;ApiParam()&#64;RequestParam(required =false,name="topicIds") ArrayList&lt;String&gt; topicIds,
    &#64;ApiParam()&#64;RequestParam(required =false,name="authorIds") ArrayList&lt;String&gt; authorIds,
    &#64;ApiParam() String contentLike,
    &#64;ApiParam() String createAtLike,
    &#64;ApiParam()&#64;RequestParam(required =false,name="replyIds") ArrayList&lt;String&gt; replyIds,
    &#64;ApiParam() Date createTimeMin,
    &#64;ApiParam() Date createTimeMax,
    &#64;ApiParam() Date updateTimeMin,
    &#64;ApiParam() Date updateTimeMax,
    &#64;ApiParam(hidden = true) TopicReply topicReply,
    &#64;ApiParam(hidden = true) Pagination pagination
    </pre>
	 * 
	 * sql:select a.topic_reply_id, a.topic_id, a.author_id, a.content, a.create_at, a.reply_id, a.create_time, a.update_time, a.delete_flag from topic_reply a where a.delete_flag = 0 and a.topic_reply_id in ( ? ) and a.topic_id in ( ? ) and a.author_id in ( ? ) and a.content like CONCAT('%',?,'%') and a.create_at like CONCAT('%',?,'%') and a.reply_id in ( ? ) and a.create_time >=? and a.create_time <? and a.update_time >=? and a.update_time <? and 0 = 1
	 */
	public PageList<TopicReply> getTopicReplyPageListByDefaultQuery(TopicReply topicReply, int pageSize, int pageNum) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("topicReplyId")&#64;RequestParam(required =false,name="topicReplyIds") ArrayList&lt;String&gt; topicReplyIds,
    
    </pre>
	 * 
	 * sql:select a.topic_reply_id, a.topic_id, a.author_id, a.content, a.create_at, a.reply_id, a.create_time, a.update_time, a.delete_flag from topic_reply a where a.delete_flag = 0 and a.topic_reply_id in ( ? )
	 */
	public List<TopicReply> getTopicReplysByTopicReplyIds(java.util.List<String> topicReplyIds) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("topicReplyId")&#64;RequestParam(required =false,name="topicReplyIds") ArrayList&lt;String&gt; topicReplyIds,
    
    </pre>
	 * 
	 * sql:UPDATE topic_reply SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and topic_reply_id in ( ? )
	 */
	public java.util.List<String> deleteByTopicReplyIds(java.util.List<String> topicReplyIds) throws DataAccessException;
	

}



