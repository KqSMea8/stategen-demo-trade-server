/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import org.stategen.framework.ibatis.util.PageQueryUtils;
import org.stategen.framework.lite.PageList;

import com.mycompany.biz.dao.TopicAuthorDao;
import com.mycompany.biz.domain.TopicAuthor;

/**
 * TopicAuthorDao
 * <pre>
 * database table: topic_author
 * database table comments: TopicAuthor
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 该类仅可以修改引用
 * </pre>
 */
public class TopicAuthorDaoImpl extends SqlMapClientDaoSupport implements TopicAuthorDao {

    /**
	 * 
	 * sql:insert into topic_author ( create_time , update_time , delete_flag , author_id , loginname , avatar_url ) VALUES (CURRENT_TIMESTAMP(6),CURRENT_TIMESTAMP(6),0,?,?,?)
	 */
    public TopicAuthor insert(TopicAuthor topicAuthor) throws DataAccessException {
        if (topicAuthor == null) {
            throw new IllegalArgumentException("Can't insert a null data object into db.");
        }
        getSqlMapClientTemplate().insert("insert.TopicAuthor.trade", topicAuthor);
        return topicAuthor;
    }

    /**
	 * 
	 * sql:UPDATE topic_author SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and author_id = ?
	 */
    public String delete(String authorId) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("authorId", authorId);
        getSqlMapClientTemplate().update("delete.TopicAuthor.trade", params);
        return authorId;
    }

    /**
	 * 
	 * sql:UPDATE topic_author SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and loginname = ?
	 */
    public Long deleteByLoginname(String loginname) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("loginname", loginname);
        return (long) getSqlMapClientTemplate().update("deleteByLoginname.TopicAuthor.trade", params);
    }

    /**
	 * 
	 * sql:UPDATE topic_author SET update_time= CURRENT_TIMESTAMP(6) , loginname = ? , avatar_url = ? where delete_flag = 0 and author_id = ?
	 */
    public TopicAuthor update(TopicAuthor topicAuthor) throws DataAccessException {
        if (topicAuthor == null) {
            throw new IllegalArgumentException("Can't update by a null data object.");
        }
        getSqlMapClientTemplate().update("update.TopicAuthor.trade", topicAuthor);
        return topicAuthor;
    }

    /**
	 * 
	 * sql:select a.author_id, a.loginname, a.avatar_url, a.create_time, a.update_time, a.delete_flag from topic_author a where a.delete_flag = 0 and a.author_id = ?
	 */
    public TopicAuthor getTopicAuthorByAuthorId(String authorId) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("authorId", authorId);
        return (TopicAuthor) getSqlMapClientTemplate().queryForObject("getTopicAuthorByAuthorId.TopicAuthor.trade", params);
    }

    /**
	 * 
	 * sql:select a.author_id, a.loginname, a.avatar_url, a.create_time, a.update_time, a.delete_flag from topic_author a where a.delete_flag = 0 and a.loginname = ?
	 */
    public TopicAuthor getTopicAuthorByLoginname(String loginname) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("loginname", loginname);
        return (TopicAuthor) getSqlMapClientTemplate().queryForObject("getTopicAuthorByLoginname.TopicAuthor.trade", params);
    }

    /**
	 * 
	 * sql:select a.author_id, a.loginname, a.avatar_url, a.create_time, a.update_time, a.delete_flag from topic_author a where a.delete_flag = 0 and a.author_id=? and a.author_id in ( ? ) and a.loginname like CONCAT('%',?,'%') and a.avatar_url like CONCAT('%',?,'%') and a.create_time >=? and a.create_time <? and a.update_time >=? and a.update_time <? and 0 = 1
	 */
    @SuppressWarnings("unchecked")
    public PageList<TopicAuthor> getTopicAuthorPageListByDefaultQuery(TopicAuthor topicAuthor, int pageSize, int pageNum) throws DataAccessException {
        return (PageList<TopicAuthor>) PageQueryUtils.pageQuery(getSqlMapClientTemplate(), "getTopicAuthorPageListByDefaultQuery.TopicAuthor.trade", topicAuthor, pageNum, pageSize);
    }

    /**
	 * 
	 * sql:select a.author_id, a.loginname, a.avatar_url, a.create_time, a.update_time, a.delete_flag from topic_author a where a.delete_flag = 0 and 1=0 and a.author_id in ( ? )
	 */
    @SuppressWarnings("unchecked")
    public List<TopicAuthor> getTopicAuthorsByAuthorIds(java.util.List<String> authorIds) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("authorIds", authorIds);
        return (List<TopicAuthor>) getSqlMapClientTemplate().queryForList("getTopicAuthorsByAuthorIds.TopicAuthor.trade", params);
    }

    /**
	 * 
	 * sql:select a.author_id, a.loginname, a.avatar_url, a.create_time, a.update_time, a.delete_flag from topic_author a where a.delete_flag = 0 and 1=0 and a.loginname in ( ? )
	 */
    @SuppressWarnings("unchecked")
    public List<TopicAuthor> getTopicAuthorsByLoginnames(java.util.List<String> loginnames) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("loginnames", loginnames);
        return (List<TopicAuthor>) getSqlMapClientTemplate().queryForList("getTopicAuthorsByLoginnames.TopicAuthor.trade", params);
    }

    /**
	 * 
	 * sql:UPDATE topic_author SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and 1=0 and author_id in ( ? )
	 */
    public java.util.List<String> deleteByAuthorIds(java.util.List<String> authorIds) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("authorIds", authorIds);
        getSqlMapClientTemplate().update("deleteByAuthorIds.TopicAuthor.trade", params);
        return authorIds;
    }

    /**
	 * 
	 * sql:UPDATE topic_author SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and 1=0 and loginname in ( ? )
	 */
    public Long deleteByLoginnames(java.util.List<String> loginnames) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("loginnames", loginnames);
        return (long) getSqlMapClientTemplate().update("deleteByLoginnames.TopicAuthor.trade", params);
    }
}
