/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import org.stategen.framework.ibatis.util.PageQueryUtils;
import org.stategen.framework.lite.PageList;

import com.mycompany.biz.dao.UserDao;
import com.mycompany.biz.domain.User;

/**
 * UserDao
 * <pre>
 * database table: user
 * database table comments: User
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 该类仅可以修改引用
 * </pre>
 */
public class UserDaoImpl extends SqlMapClientDaoSupport implements UserDao {

    /**
	 * 
	 * sql:insert into user ( create_time , update_time , delete_flag , user_id , username , password , role_type , name , nickName , age , address , isMale , avatar , email ) VALUES (CURRENT_TIMESTAMP(6),CURRENT_TIMESTAMP(6),0,?,?,?,?,?,?,?,?,?,?,?)
	 */
    public User insert(User user) throws DataAccessException {
        if (user == null) {
            throw new IllegalArgumentException("Can't insert a null data object into db.");
        }
        getSqlMapClientTemplate().insert("insert.User.trade", user);
        return user;
    }

    /**
	 * 
	 * sql:UPDATE user SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and user_id = ?
	 */
    public Long deleteByUserId(String userId) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("userId", userId);
        return (long) getSqlMapClientTemplate().update("deleteByUserId.User.trade", params);
    }

    /**
	 * 
	 * sql:UPDATE user SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and email = ?
	 */
    public Long deleteByEmail(String email) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("email", email);
        return (long) getSqlMapClientTemplate().update("deleteByEmail.User.trade", params);
    }

    /**
	 * 
	 * sql:UPDATE user SET update_time= CURRENT_TIMESTAMP(6) , username = ? , password = ? , role_type = ? , name = ? , nickName = ? , age = ? , address = ? , isMale = ? , avatar = ? , email = ? where delete_flag = 0 and user_id = ?
	 */
    public User update(User user) throws DataAccessException {
        if (user == null) {
            throw new IllegalArgumentException("Can't update by a null data object.");
        }
        getSqlMapClientTemplate().update("update.User.trade", user);
        return user;
    }

    /**
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.user_id = ?
	 */
    public User getUserByUserId(String userId) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("userId", userId);
        return (User) getSqlMapClientTemplate().queryForObject("getUserByUserId.User.trade", params);
    }

    /**
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.email = ?
	 */
    public User getUserByEmail(String email) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("email", email);
        return (User) getSqlMapClientTemplate().queryForObject("getUserByEmail.User.trade", params);
    }

    /**
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.user_id in ( ? ) and a.username like CONCAT('%',?,'%') and a.password like CONCAT('%',?,'%') and a.role_type in ( ? ) and a.name like CONCAT('%',?,'%') and a.nickName like CONCAT('%',?,'%') and a.age >=? and a.age <? and a.address like CONCAT('%',?,'%') and a.avatar like CONCAT('%',?,'%') and a.email like CONCAT('%',?,'%') and a.create_time >=? and a.create_time <? and a.update_time >=? and a.update_time <? and 0 = 1
	 */
    @SuppressWarnings("unchecked")
    public PageList<User> getUserPageListByDefaultQuery(User user, int pageSize, int pageNum) throws DataAccessException {
        return (PageList<User>) PageQueryUtils.pageQuery(getSqlMapClientTemplate(), "getUserPageListByDefaultQuery.User.trade", user, pageNum, pageSize);
    }

    /**
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.user_id in ( ? )
	 */
    @SuppressWarnings("unchecked")
    public List<User> getUsersByUserIds(java.util.List<String> userIds) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("userIds", userIds);
        return (List<User>) getSqlMapClientTemplate().queryForList("getUsersByUserIds.User.trade", params);
    }

    /**
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.email in ( ? )
	 */
    @SuppressWarnings("unchecked")
    public List<User> getUsersByEmails(java.util.List<String> emails) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("emails", emails);
        return (List<User>) getSqlMapClientTemplate().queryForList("getUsersByEmails.User.trade", params);
    }

    /**
	 * 
	 * sql:UPDATE user SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and user_id in ( ? )
	 */
    public Long deleteByUserIds(java.util.List<String> userIds) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("userIds", userIds);
        return (long) getSqlMapClientTemplate().update("deleteByUserIds.User.trade", params);
    }

    /**
	 * 
	 * sql:UPDATE user SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and email in ( ? )
	 */
    public Long deleteByEmails(java.util.List<String> emails) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("emails", emails);
        return (long) getSqlMapClientTemplate().update("deleteByEmails.User.trade", params);
    }

    /**
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.username=? and a.password=?
	 */
    public User login(String username, String password) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(2);
        params.put("username", username);
        params.put("password", password);
        return (User) getSqlMapClientTemplate().queryForObject("login.User.trade", params);
    }

    /**
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.address like concat('%',? ,'%') and a.create_time >= ? and a.create_time < ?
	 */
    @SuppressWarnings("unchecked")
    public PageList<User> getUsers(String address, java.util.Date beginDate, java.util.Date endDate, int pageSize, int pageNum) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(3);
        params.put("address", address);
        params.put("beginDate", beginDate);
        params.put("endDate", endDate);
        return (PageList<User>) PageQueryUtils.pageQuery(getSqlMapClientTemplate(), "getUsers.User.trade", params, pageNum, pageSize);
    }

    /**
	 * 
	 * sql:UPDATE user SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and user_id in ( ? )
	 */
    public Long deleteByIds(java.util.List<String> userIds) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("userIds", userIds);
        return (long) getSqlMapClientTemplate().update("deleteByIds.User.trade", params);
    }
}
