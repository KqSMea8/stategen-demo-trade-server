/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.dao;

import java.util.List;

import com.mycompany.biz.domain.User;
import org.springframework.dao.DataAccessException;
import org.stategen.framework.lite.PageList;

/**
 * UserDao
 * <pre>
 * database table: user
 * database table comments: User
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 该类仅可以修改引用
 * </pre>
 */
public interface UserDao {

	/**
    <pre>
    &#64;ApiParam() String userId,
    &#64;ApiParam() String username,
    &#64;ApiParam() String password,
    &#64;ApiParam() RoleType roleType,
    &#64;ApiParam() String name,
    &#64;ApiParam() String nickName,
    &#64;ApiParam() Integer age,
    &#64;ApiParam() String address,
    &#64;ApiParam() Boolean isMale,
    &#64;ApiParam() String avatar,
    &#64;ApiParam() String email,
    &#64;ApiParam(hidden = true) User user,
    
    </pre>
	 * 
	 * sql:insert into user ( create_time , update_time , delete_flag , user_id , username , password , role_type , name , nickName , age , address , isMale , avatar , email ) VALUES (CURRENT_TIMESTAMP(6),CURRENT_TIMESTAMP(6),0,?,?,?,?,?,?,?,?,?,?,?)
	 */
	public User insert(User user) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("用户ID") String userId,
    
    </pre>
	 * 
	 * sql:UPDATE user SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and user_id = ?
	 */
	public Long deleteByUserId(String userId) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("邮箱") String email,
    
    </pre>
	 * 
	 * sql:UPDATE user SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and email = ?
	 */
	public Long deleteByEmail(String email) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam() String username,
    &#64;ApiParam() String password,
    &#64;ApiParam() RoleType roleType,
    &#64;ApiParam() String name,
    &#64;ApiParam() String nickName,
    &#64;ApiParam() Integer age,
    &#64;ApiParam() String address,
    &#64;ApiParam() Boolean isMale,
    &#64;ApiParam() String avatar,
    &#64;ApiParam() String email,
    &#64;ApiParam() String userId,
    &#64;ApiParam(hidden = true) User user,
    
    </pre>
	 * 
	 * sql:UPDATE user SET update_time= CURRENT_TIMESTAMP(6) , username = ? , password = ? , role_type = ? , name = ? , nickName = ? , age = ? , address = ? , isMale = ? , avatar = ? , email = ? where delete_flag = 0 and user_id = ?
	 */
	public User update(User user) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("用户ID") String userId,
    
    </pre>
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.user_id = ?
	 */
	public User getUserByUserId(String userId) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("邮箱") String email,
    
    </pre>
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.email = ?
	 */
	public User getUserByEmail(String email) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam()&#64;RequestParam(required =false,name="userIds") ArrayList&lt;String&gt; userIds,
    &#64;ApiParam() String usernameLike,
    &#64;ApiParam() String passwordLike,
    &#64;ApiParam()&#64;RequestParam(required =false,name="roleTypes") ArrayList&lt;RoleType&gt; roleTypes,
    &#64;ApiParam() String nameLike,
    &#64;ApiParam() String nickNameLike,
    &#64;ApiParam() Integer ageMin,
    &#64;ApiParam() Integer ageMax,
    &#64;ApiParam() String addressLike,
    &#64;ApiParam() String avatarLike,
    &#64;ApiParam() String emailLike,
    &#64;ApiParam() Date createTimeMin,
    &#64;ApiParam() Date createTimeMax,
    &#64;ApiParam() Date updateTimeMin,
    &#64;ApiParam() Date updateTimeMax,
    &#64;ApiParam(hidden = true) User user,
    &#64;ApiParam(hidden = true) Pagination pagination
    </pre>
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.user_id in ( ? ) and a.username like CONCAT('%',?,'%') and a.password like CONCAT('%',?,'%') and a.role_type in ( ? ) and a.name like CONCAT('%',?,'%') and a.nickName like CONCAT('%',?,'%') and a.age >=? and a.age <? and a.address like CONCAT('%',?,'%') and a.avatar like CONCAT('%',?,'%') and a.email like CONCAT('%',?,'%') and a.create_time >=? and a.create_time <? and a.update_time >=? and a.update_time <? and 0 = 1
	 */
	public PageList<User> getUserPageListByDefaultQuery(User user, int pageSize, int pageNum) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("用户ID")&#64;RequestParam(required =false,name="userIds") ArrayList&lt;String&gt; userIds,
    
    </pre>
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.user_id in ( ? )
	 */
	public List<User> getUsersByUserIds(java.util.List<String> userIds) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("邮箱")&#64;RequestParam(required =false,name="emails") ArrayList&lt;String&gt; emails,
    
    </pre>
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.email in ( ? )
	 */
	public List<User> getUsersByEmails(java.util.List<String> emails) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("用户ID")&#64;RequestParam(required =false,name="userIds") ArrayList&lt;String&gt; userIds,
    
    </pre>
	 * 
	 * sql:UPDATE user SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and user_id in ( ? )
	 */
	public Long deleteByUserIds(java.util.List<String> userIds) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("邮箱")&#64;RequestParam(required =false,name="emails") ArrayList&lt;String&gt; emails,
    
    </pre>
	 * 
	 * sql:UPDATE user SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and email in ( ? )
	 */
	public Long deleteByEmails(java.util.List<String> emails) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("用户名") String username,
    &#64;ApiParam("密码") String password,
    
    </pre>
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.username=? and a.password=?
	 */
	public User login(String username, String password) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("address") String address,
    &#64;ApiParam("创建时间") Date beginDate,
    &#64;ApiParam("创建时间") Date endDate,
    &#64;ApiParam(hidden = true) Pagination pagination
    </pre>
	 * 
	 * sql:select a.user_id, a.username, a.password, a.role_type, a.name, a.nickName, a.age, a.address, a.isMale, a.avatar, a.email, a.create_time, a.update_time, a.delete_flag from user a where a.delete_flag = 0 and a.address like concat('%',? ,'%') and a.create_time >= ? and a.create_time < ?
	 */
	public PageList<User> getUsers(String address, java.util.Date beginDate, java.util.Date endDate, int pageSize, int pageNum) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("用户ID")&#64;RequestParam(required =false,name="userIds") ArrayList&lt;String&gt; userIds,
    
    </pre>
	 * 
	 * sql:UPDATE user SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and user_id in ( ? )
	 */
	public Long deleteByIds(java.util.List<String> userIds) throws DataAccessException;
	

}



