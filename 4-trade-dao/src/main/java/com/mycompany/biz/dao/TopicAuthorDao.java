/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.dao;

import java.util.List;

import com.mycompany.biz.domain.TopicAuthor;
import org.springframework.dao.DataAccessException;
import org.stategen.framework.lite.PageList;

/**
 * TopicAuthorDao
 * <pre>
 * database table: topic_author
 * database table comments: TopicAuthor
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 该类仅可以修改引用
 * </pre>
 */
public interface TopicAuthorDao {

	/**
    <pre>
    &#64;ApiParam() String authorId,
    &#64;ApiParam() String loginname,
    &#64;ApiParam() String avatarUrl,
    &#64;ApiParam(hidden = true) TopicAuthor topicAuthor,
    
    </pre>
	 * 
	 * sql:insert into topic_author ( create_time , update_time , delete_flag , author_id , loginname , avatar_url ) VALUES (CURRENT_TIMESTAMP(6),CURRENT_TIMESTAMP(6),0,?,?,?)
	 */
	public TopicAuthor insert(TopicAuthor topicAuthor) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("authorId") String authorId,
    
    </pre>
	 * 
	 * sql:UPDATE topic_author SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and author_id = ?
	 */
	public String delete(String authorId) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("loginname") String loginname,
    
    </pre>
	 * 
	 * sql:UPDATE topic_author SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and loginname = ?
	 */
	public Long deleteByLoginname(String loginname) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam() String loginname,
    &#64;ApiParam() String avatarUrl,
    &#64;ApiParam() String authorId,
    &#64;ApiParam(hidden = true) TopicAuthor topicAuthor,
    
    </pre>
	 * 
	 * sql:UPDATE topic_author SET update_time= CURRENT_TIMESTAMP(6) , loginname = ? , avatar_url = ? where delete_flag = 0 and author_id = ?
	 */
	public TopicAuthor update(TopicAuthor topicAuthor) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("authorId") String authorId,
    
    </pre>
	 * 
	 * sql:select a.author_id, a.loginname, a.avatar_url, a.create_time, a.update_time, a.delete_flag from topic_author a where a.delete_flag = 0 and a.author_id = ?
	 */
	public TopicAuthor getTopicAuthorByAuthorId(String authorId) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("loginname") String loginname,
    
    </pre>
	 * 
	 * sql:select a.author_id, a.loginname, a.avatar_url, a.create_time, a.update_time, a.delete_flag from topic_author a where a.delete_flag = 0 and a.loginname = ?
	 */
	public TopicAuthor getTopicAuthorByLoginname(String loginname) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam() String authorId,
    &#64;ApiParam()&#64;RequestParam(required =false,name="authorIds") ArrayList&lt;String&gt; authorIds,
    &#64;ApiParam() String loginnameLike,
    &#64;ApiParam() String avatarUrlLike,
    &#64;ApiParam() Date createTimeMin,
    &#64;ApiParam() Date createTimeMax,
    &#64;ApiParam() Date updateTimeMin,
    &#64;ApiParam() Date updateTimeMax,
    &#64;ApiParam(hidden = true) TopicAuthor topicAuthor,
    &#64;ApiParam(hidden = true) Pagination pagination
    </pre>
	 * 
	 * sql:select a.author_id, a.loginname, a.avatar_url, a.create_time, a.update_time, a.delete_flag from topic_author a where a.delete_flag = 0 and a.author_id=? and a.author_id in ( ? ) and a.loginname like CONCAT('%',?,'%') and a.avatar_url like CONCAT('%',?,'%') and a.create_time >=? and a.create_time <? and a.update_time >=? and a.update_time <? and 0 = 1
	 */
	public PageList<TopicAuthor> getTopicAuthorPageListByDefaultQuery(TopicAuthor topicAuthor, int pageSize, int pageNum) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("authorId")&#64;RequestParam(required =false,name="authorIds") ArrayList&lt;String&gt; authorIds,
    
    </pre>
	 * 
	 * sql:select a.author_id, a.loginname, a.avatar_url, a.create_time, a.update_time, a.delete_flag from topic_author a where a.delete_flag = 0 and 1=0 and a.author_id in ( ? )
	 */
	public List<TopicAuthor> getTopicAuthorsByAuthorIds(java.util.List<String> authorIds) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("loginname")&#64;RequestParam(required =false,name="loginnames") ArrayList&lt;String&gt; loginnames,
    
    </pre>
	 * 
	 * sql:select a.author_id, a.loginname, a.avatar_url, a.create_time, a.update_time, a.delete_flag from topic_author a where a.delete_flag = 0 and 1=0 and a.loginname in ( ? )
	 */
	public List<TopicAuthor> getTopicAuthorsByLoginnames(java.util.List<String> loginnames) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("authorId")&#64;RequestParam(required =false,name="authorIds") ArrayList&lt;String&gt; authorIds,
    
    </pre>
	 * 
	 * sql:UPDATE topic_author SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and 1=0 and author_id in ( ? )
	 */
	public java.util.List<String> deleteByAuthorIds(java.util.List<String> authorIds) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("loginname")&#64;RequestParam(required =false,name="loginnames") ArrayList&lt;String&gt; loginnames,
    
    </pre>
	 * 
	 * sql:UPDATE topic_author SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and 1=0 and loginname in ( ? )
	 */
	public Long deleteByLoginnames(java.util.List<String> loginnames) throws DataAccessException;
	

}



