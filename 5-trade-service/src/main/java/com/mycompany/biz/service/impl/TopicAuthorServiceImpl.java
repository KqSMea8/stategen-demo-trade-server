/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.service.impl;

import java.util.List;
import javax.annotation.Resource;

import org.stategen.framework.lite.PageList;
import org.stategen.framework.util.StringUtil;

import com.mycompany.biz.dao.TopicAuthorDao;
import com.mycompany.biz.domain.TopicAuthor;
import com.mycompany.biz.service.TopicAuthorService;

/**
 * TopicAuthorServiceImpl
 * <pre>
 * database table: topic_author
 * database table comments: TopicAuthor
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 新生成的类中的方法，只有在不同名的情况下才会被追加到该类下，
 * 因此该类可以修改任何部分
 * </pre>
 */
public class TopicAuthorServiceImpl implements TopicAuthorService {

    @Resource(name = "topicAuthorDao")
    TopicAuthorDao topicAuthorDao;

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#insert
     * @see com.mycompany.biz.service.TopicAuthorService#insert
     */
    @Override
    public TopicAuthor insert(TopicAuthor topicAuthor) {
        return topicAuthorDao.insert(topicAuthor);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#delete
     * @see com.mycompany.biz.service.TopicAuthorService#delete
     */
    @Override
    public String delete(String authorId) {
        return topicAuthorDao.delete(authorId);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#update
     * @see com.mycompany.biz.service.TopicAuthorService#update
     */
    @Override
    public TopicAuthor update(TopicAuthor topicAuthor) {
        return topicAuthorDao.update(topicAuthor);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#getTopicAuthorByAuthorId
     * @see com.mycompany.biz.service.TopicAuthorService#getTopicAuthorByAuthorId
     */
    @Override
    public TopicAuthor getTopicAuthorByAuthorId(String authorId) {
        return topicAuthorDao.getTopicAuthorByAuthorId(authorId);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#getTopicAuthorPageListByDefaultQuery
     * @see com.mycompany.biz.service.TopicAuthorService#getTopicAuthorPageListByDefaultQuery
     */
    @Override
    public PageList<TopicAuthor> getTopicAuthorPageListByDefaultQuery(TopicAuthor topicAuthor, int pageSize, int pageNum) {
        return topicAuthorDao.getTopicAuthorPageListByDefaultQuery(topicAuthor, pageSize, pageNum);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#getTopicAuthorsByAuthorIds
     * @see com.mycompany.biz.service.TopicAuthorService#getTopicAuthorsByAuthorIds
     */
    @Override
    public List<TopicAuthor> getTopicAuthorsByAuthorIds(java.util.List<String> authorIds) {
        return topicAuthorDao.getTopicAuthorsByAuthorIds(authorIds);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#deleteByAuthorIds
     * @see com.mycompany.biz.service.TopicAuthorService#deleteByAuthorIds
     */
    @Override
    public java.util.List<String> deleteByAuthorIds(java.util.List<String> authorIds) {
        return topicAuthorDao.deleteByAuthorIds(authorIds);
    }

    /*** 保存topicAuthor,有id时更新，没有id时插入,并带回新的id，返回 topicAuthor*/
    @Override
    public TopicAuthor saveTopicAuthor(TopicAuthor topicAuthor) {
        if (topicAuthor != null) {
            java.lang.String authorId = topicAuthor.getAuthorId();
            if (StringUtil.isBlank(authorId)) {
                insert(topicAuthor);
            } else {
                update(topicAuthor);
            }
        }
        return topicAuthor;
    }

    /*** 批量保存topicAuthors,有id时更新，没有id时插入,并带回新的id，返回 topicAuthors*/
    @Override
    public List<TopicAuthor> saveTopicAuthors(List<TopicAuthor> topicAuthors) {
        for (TopicAuthor topicAuthor : topicAuthors) {
            this.saveTopicAuthor(topicAuthor);
        }
        return topicAuthors;
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#deleteByLoginname
     * @see com.mycompany.biz.service.TopicAuthorService#deleteByLoginname
     */
    @Override
    public Long deleteByLoginname(String loginname) {
        return topicAuthorDao.deleteByLoginname(loginname);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#getTopicAuthorByLoginname
     * @see com.mycompany.biz.service.TopicAuthorService#getTopicAuthorByLoginname
     */
    @Override
    public TopicAuthor getTopicAuthorByLoginname(String loginname) {
        return topicAuthorDao.getTopicAuthorByLoginname(loginname);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#getTopicAuthorsByLoginnames
     * @see com.mycompany.biz.service.TopicAuthorService#getTopicAuthorsByLoginnames
     */
    @Override
    public List<TopicAuthor> getTopicAuthorsByLoginnames(java.util.List<String> loginnames) {
        return topicAuthorDao.getTopicAuthorsByLoginnames(loginnames);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#deleteByLoginnames
     * @see com.mycompany.biz.service.TopicAuthorService#deleteByLoginnames
     */
    @Override
    public Long deleteByLoginnames(java.util.List<String> loginnames) {
        return topicAuthorDao.deleteByLoginnames(loginnames);
    }
}
