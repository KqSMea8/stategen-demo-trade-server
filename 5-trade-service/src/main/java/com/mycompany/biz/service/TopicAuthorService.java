/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.service;

import java.util.List;
import org.stategen.framework.lite.PageList;

import com.mycompany.biz.domain.TopicAuthor;

/**
 * TopicAuthorService
 * <pre>
 * database table: topic_author
 * database table comments: TopicAuthor
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 新生成的类中的方法，只有在不同名的情况下才会被追加到该类下，
 * 因此该类可以修改任何部分
 * </pre>
 */
public interface TopicAuthorService extends TopicAuthorServiceFacade {

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#insert
     */
    public TopicAuthor insert(TopicAuthor topicAuthor);

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#delete
     */
    public String delete(String authorId);

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#update
     */
    public TopicAuthor update(TopicAuthor topicAuthor);

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#getTopicAuthorByAuthorId
     */
    public TopicAuthor getTopicAuthorByAuthorId(String authorId);

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#getTopicAuthorPageListByDefaultQuery
     */
    public PageList<TopicAuthor> getTopicAuthorPageListByDefaultQuery(TopicAuthor topicAuthor, int pageSize, int pageNum);

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#getTopicAuthorsByAuthorIds
     */
    public List<TopicAuthor> getTopicAuthorsByAuthorIds(java.util.List<String> authorIds);

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#deleteByAuthorIds
     */
    public java.util.List<String> deleteByAuthorIds(java.util.List<String> authorIds);

    /*** 保存topicAuthor,有id时更新，没有id时插入,并带回新的id，返回 topicAuthor*/
    public TopicAuthor saveTopicAuthor(TopicAuthor topicAuthor);

    /*** 批量保存topicAuthors,有id时更新，没有id时插入,并带回新的id，返回 topicAuthors*/
    public List<TopicAuthor> saveTopicAuthors(List<TopicAuthor> topicAuthors);

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#deleteByLoginname
     */
    public Long deleteByLoginname(String loginname);

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#getTopicAuthorByLoginname
     */
    public TopicAuthor getTopicAuthorByLoginname(String loginname);

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#getTopicAuthorsByLoginnames
     */
    public List<TopicAuthor> getTopicAuthorsByLoginnames(java.util.List<String> loginnames);

    /**
     * 
     * @see com.mycompany.biz.dao.TopicAuthorDao#deleteByLoginnames
     */
    public Long deleteByLoginnames(java.util.List<String> loginnames);
}
