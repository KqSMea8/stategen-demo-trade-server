/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.service.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Function;
import javax.annotation.Resource;

import org.stategen.framework.lite.PageList;
import org.stategen.framework.util.CollectionUtil;
import org.stategen.framework.util.StringUtil;

import com.mycompany.biz.dao.UserColorDao;
import com.mycompany.biz.domain.UserColor;
import com.mycompany.biz.service.UserColorService;

/**
 * UserColorServiceImpl
 * <pre>
 * database table: user_color
 * database table comments: UserColor
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 新生成的类中的方法，只有在不同名的情况下才会被追加到该类下，
 * 因此该类可以修改任何部分
 * </pre>
 */
public class UserColorServiceImpl implements UserColorService {

    @Resource(name = "userColorDao")
    UserColorDao userColorDao;

    /**
     * 
     * @see com.mycompany.biz.dao.UserColorDao#insert
     * @see com.mycompany.biz.service.UserColorService#insert
     */
    @Override
    public UserColor insert(UserColor userColor) {
        return userColorDao.insert(userColor);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.UserColorDao#delete
     * @see com.mycompany.biz.service.UserColorService#delete
     */
    @Override
    public Integer delete(Integer id) {
        return userColorDao.delete(id);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.UserColorDao#update
     * @see com.mycompany.biz.service.UserColorService#update
     */
    @Override
    public UserColor update(UserColor userColor) {
        return userColorDao.update(userColor);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.UserColorDao#getUserColorById
     * @see com.mycompany.biz.service.UserColorService#getUserColorById
     */
    @Override
    public UserColor getUserColorById(Integer id) {
        return userColorDao.getUserColorById(id);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.UserColorDao#getUserColorPageList
     * @see com.mycompany.biz.service.UserColorService#getUserColorPageList
     */
    @Override
    public PageList<UserColor> getUserColorPageList(UserColor userColor, int pageSize, int pageNum) {
        return userColorDao.getUserColorPageList(userColor, pageSize, pageNum);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.UserColorDao#getUserColorsByIds
     * @see com.mycompany.biz.service.UserColorService#getUserColorsByIds
     */
    @Override
    public List<UserColor> getUserColorsByIds(java.util.List<Integer> ids) {
        return userColorDao.getUserColorsByIds(ids);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.UserColorDao#deleteByIds
     * @see com.mycompany.biz.service.UserColorService#deleteByIds
     */
    @Override
    public java.util.List<Integer> deleteByIds(java.util.List<Integer> ids) {
        return userColorDao.deleteByIds(ids);
    }

    /*** 保存userColor,有id时更新，没有id时插入,并带回新的id，返回 userColor*/
    @Override
    public UserColor saveUserColor(UserColor userColor) {
        if (userColor != null) {
            java.lang.Integer id = userColor.getId();
            if (id != null) {
                insert(userColor);
            } else {
                update(userColor);
            }
        }
        return userColor;
    }

    /*** 批量保存userColors,有id时更新，没有id时插入,并带回新的id，返回 userColors*/
    @Override
    public List<UserColor> saveUserColors(List<UserColor> userColors) {
        for (UserColor userColor : userColors) {
            this.saveUserColor(userColor);
        }
        return userColors;
    }

    @Override
    public <D> void assignBeanTo(Collection<D> dests, Function<? super D, Integer> destGetMethod, BiConsumer<D, UserColor> destSetMethod) {
        if (CollectionUtil.isNotEmpty(dests)) {
            Set<Integer> ids = CollectionUtil.toSet(dests, destGetMethod);
            List<UserColor> userColors = this.getUserColorsByIds(new ArrayList<Integer>(ids));
            if (CollectionUtil.isNotEmpty(userColors)) {
                CollectionUtil.setModelByList(dests, userColors, destGetMethod, destSetMethod, UserColor::getId);
            }
        }
    }
}
