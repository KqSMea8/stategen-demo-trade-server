/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.service.impl;

import java.util.List;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Function;

import javax.annotation.Resource;



import org.stategen.framework.lite.PageList;

import org.stategen.framework.util.CollectionUtil;
import org.stategen.framework.util.StringUtil;

import com.mycompany.biz.domain.UploadFile;
import com.mycompany.biz.service.UploadFileService;
import com.mycompany.biz.dao.UploadFileDao;

/**
 * UploadFileServiceImpl
 * <pre>
 * database table: upload_file
 * database table comments: UploadFile
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 新生成的类中的方法，只有在不同名的情况下才会被追加到该类下，
 * 因此该类可以修改任何部分
 * </pre>
 */
public class UploadFileServiceImpl  implements UploadFileService {

    @Resource(name="uploadFileDao")
    UploadFileDao uploadFileDao;

    /**
     * 
     * @see com.mycompany.biz.dao.UploadFileDao#insert
     * @see com.mycompany.biz.service.UploadFileService#insert
     */
    @Override
    public UploadFile insert(UploadFile uploadFile) {
        return uploadFileDao.insert(uploadFile);
    }
    
    /**
     * 
     * @see com.mycompany.biz.dao.UploadFileDao#delete
     * @see com.mycompany.biz.service.UploadFileService#delete
     */
    @Override
    public String delete(String fileId) {
        return uploadFileDao.delete(fileId);
    }
    
    /**
     * 
     * @see com.mycompany.biz.dao.UploadFileDao#update
     * @see com.mycompany.biz.service.UploadFileService#update
     */
    @Override
    public UploadFile update(UploadFile uploadFile) {
        return uploadFileDao.update(uploadFile);
    }
    
    /**
     * 
     * @see com.mycompany.biz.dao.UploadFileDao#getUploadFileByFileId
     * @see com.mycompany.biz.service.UploadFileService#getUploadFileByFileId
     */
    @Override
    public UploadFile getUploadFileByFileId(String fileId) {
        return uploadFileDao.getUploadFileByFileId(fileId);
    }
    
    /**
     * 
     * @see com.mycompany.biz.dao.UploadFileDao#getUploadFilePageList
     * @see com.mycompany.biz.service.UploadFileService#getUploadFilePageList
     */
    @Override
    public PageList<UploadFile> getUploadFilePageList(UploadFile uploadFile, int pageSize, int pageNum) {
        return uploadFileDao.getUploadFilePageList(uploadFile, pageSize, pageNum);
    }
    
    /**
     * 
     * @see com.mycompany.biz.dao.UploadFileDao#getUploadFilesByFileIds
     * @see com.mycompany.biz.service.UploadFileService#getUploadFilesByFileIds
     */
    @Override
    public List<UploadFile> getUploadFilesByFileIds(java.util.List<String> fileIds) {
        return uploadFileDao.getUploadFilesByFileIds(fileIds);
    }
    
    /**
     * 
     * @see com.mycompany.biz.dao.UploadFileDao#deleteByFileIds
     * @see com.mycompany.biz.service.UploadFileService#deleteByFileIds
     */
    @Override
    public java.util.List<String> deleteByFileIds(java.util.List<String> fileIds) {
        return uploadFileDao.deleteByFileIds(fileIds);
    }
    

    /*** 保存uploadFile,有id时更新，没有id时插入,并带回新的id，返回 uploadFile*/
    @Override
    public UploadFile saveUploadFile(UploadFile uploadFile){
        if (uploadFile != null) {
            java.lang.String fileId = uploadFile.getFileId();
            if (StringUtil.isBlank(fileId)) {
                insert(uploadFile);
            } else {
                update(uploadFile);
            }
        }
        return uploadFile;
    }

    /*** 批量保存uploadFiles,有id时更新，没有id时插入,并带回新的id，返回 uploadFiles*/
    @Override
    public List<UploadFile> saveUploadFiles(List<UploadFile> uploadFiles) {
        for (UploadFile uploadFile : uploadFiles) {
            this.saveUploadFile(uploadFile);
        }
        return uploadFiles;
    }

    @Override
    public <D> void assignBeanTo(Collection<D> dests, Function<? super D, String> destGetMethod, BiConsumer<D, UploadFile> destSetMethod) {
        if (CollectionUtil.isNotEmpty(dests)) {
            Set<String> fileIds = CollectionUtil.toSet(dests, destGetMethod);
            List<UploadFile> uploadFiles = this.getUploadFilesByFileIds(new ArrayList<String>(fileIds));
            if (CollectionUtil.isNotEmpty(uploadFiles)) {
                CollectionUtil.setModelByList(dests, uploadFiles, destGetMethod, destSetMethod, UploadFile::getFileId);
            }
        }
    }

}