/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.service.impl;

import java.util.List;

import javax.annotation.Resource;

import org.stategen.framework.lite.PageList;
import org.stategen.framework.util.CollectionUtil;
import org.stategen.framework.util.StringUtil;

import com.mycompany.biz.dao.TopicReplyDao;
import com.mycompany.biz.domain.TopicReply;
import com.mycompany.biz.domain.User;
import com.mycompany.biz.service.TopicReplyService;
import com.mycompany.biz.service.TopicUpService;
import com.mycompany.biz.service.UserService;

/**
 * TopicReplyServiceImpl
 * <pre>
 * database table: topic_reply
 * database table comments: TopicReply
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 新生成的类中的方法，只有在不同名的情况下才会被追加到该类下，
 * 因此该类可以修改任何部分
 * </pre>
 */
public class TopicReplyServiceImpl implements TopicReplyService {

    @Resource(name = "topicReplyDao")
    TopicReplyDao topicReplyDao;
    
    @Resource
    UserService userService;
    
    @Resource
    TopicUpService topicUpService;
    
    

    /**
     * 
     * @see com.mycompany.biz.dao.TopicReplyDao#insert
     * @see com.mycompany.biz.service.TopicReplyService#insert
     */
    @Override
    public TopicReply insert(TopicReply topicReply) {
        return topicReplyDao.insert(topicReply);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicReplyDao#delete
     * @see com.mycompany.biz.service.TopicReplyService#delete
     */
    @Override
    public String delete(String topicReplyId) {
        return topicReplyDao.delete(topicReplyId);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicReplyDao#update
     * @see com.mycompany.biz.service.TopicReplyService#update
     */
    @Override
    public TopicReply update(TopicReply topicReply) {
        return topicReplyDao.update(topicReply);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicReplyDao#getTopicReplyByTopicReplyId
     * @see com.mycompany.biz.service.TopicReplyService#getTopicReplyByTopicReplyId
     */
    @Override
    public TopicReply getTopicReplyByTopicReplyId(String topicReplyId) {
        return topicReplyDao.getTopicReplyByTopicReplyId(topicReplyId);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicReplyDao#getTopicReplyPageListByDefaultQuery
     * @see com.mycompany.biz.service.TopicReplyService#getTopicReplyPageListByDefaultQuery
     */
    @Override
    public PageList<TopicReply> getTopicReplyPageListByDefaultQuery(TopicReply topicReply, int pageSize, int pageNum) {
        PageList<TopicReply> topicReplyPageList = topicReplyDao.getTopicReplyPageListByDefaultQuery(topicReply, pageSize, pageNum);
        List<TopicReply> topicRelies = topicReplyPageList.getItems();
        List<String> authorIds = CollectionUtil.toList(topicRelies, TopicReply::getAuthorId);
        List<User> topicAuthors = this.userService.getUsersByUserIds(authorIds);
        CollectionUtil.setModelByList(topicRelies, topicAuthors, TopicReply::getAuthorId, TopicReply::setAuthor, User::getUserId);
        CollectionUtil.setListValue(topicRelies, CollectionUtil.newEmptyList(), TopicReply::setUps);
        return topicReplyPageList;
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicReplyDao#getTopicReplysByTopicReplyIds
     * @see com.mycompany.biz.service.TopicReplyService#getTopicReplysByTopicReplyIds
     */
    @Override
    public List<TopicReply> getTopicReplysByTopicReplyIds(java.util.List<String> topicReplyIds) {
        return topicReplyDao.getTopicReplysByTopicReplyIds(topicReplyIds);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.TopicReplyDao#deleteByTopicReplyIds
     * @see com.mycompany.biz.service.TopicReplyService#deleteByTopicReplyIds
     */
    @Override
    public java.util.List<String> deleteByTopicReplyIds(java.util.List<String> topicReplyIds) {
        return topicReplyDao.deleteByTopicReplyIds(topicReplyIds);
    }

    /*** 保存topicReply,有id时更新，没有id时插入,并带回新的id，返回 topicReply*/
    @Override
    public TopicReply saveTopicReply(TopicReply topicReply) {
        if (topicReply != null) {
            java.lang.String topicReplyId = topicReply.getTopicReplyId();
            if (StringUtil.isBlank(topicReplyId)) {
                insert(topicReply);
            } else {
                update(topicReply);
            }
        }
        return topicReply;
    }

    /*** 批量保存topicReplys,有id时更新，没有id时插入,并带回新的id，返回 topicReplys*/
    @Override
    public List<TopicReply> saveTopicReplys(List<TopicReply> topicReplys) {
        for (TopicReply topicReply : topicReplys) {
            this.saveTopicReply(topicReply);
        }
        return topicReplys;
    }
}
